{"version":3,"sources":["logo.svg","lookup/components.js","tweets/components.js","tweets/lookup.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","message","send","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","canTweet","handleBackendUpdate","tempNewTweets","unshift","alert","className","onSubmit","event","preventDefault","newVal","current","value","content","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","updateFinalTweets","map","item","index","Tweet","tweet","didRetweet","ActionBtn","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","tweetId","id","apiTweetAction","ParentTweet","parent","hideActions","actionTweet","setActionTweet","handlePerformAction","newActionTweet","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e450279e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    var cookies = document.cookie.split(\";\");\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`;\r\n  xhr.responseType = \"json\";\r\n  const csrftoken = getCookie(\"csrftoken\");\r\n  xhr.open(method, url);\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n  if (csrftoken) {\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n  }\r\n\r\n  xhr.onload = function () {\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = function (e) {\r\n    console.log(e);\r\n    callback({ message: \"The request was an error\" }, 400);\r\n  };\r\n  xhr.send(jsonData);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { apiTweetAction, apiTweetCreate, apiTweetList } from \"./lookup\";\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef();\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true;\r\n  const handleBackendUpdate = (response, status) => {\r\n    // backend api response handler\r\n    let tempNewTweets = [...newTweets];\r\n    if (status === 201) {\r\n      tempNewTweets.unshift(response);\r\n      setNewTweets(tempNewTweets);\r\n    } else {\r\n      console.log(response);\r\n      alert(\"An error occured please try again\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newVal = textAreaRef.current.value;\r\n    // backend api request\r\n    apiTweetCreate(newVal, handleBackendUpdate);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n  return (\r\n    <div className={props.className}>\r\n      {canTweet === true && (\r\n        <div className=\"col-12 mb-3\">\r\n          <form onSubmit={handleSubmit}>\r\n            <textarea\r\n              ref={textAreaRef}\r\n              required={true}\r\n              className=\"form-control\"\r\n              name=\"tweet\"\r\n            ></textarea>\r\n            <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n              Tweet\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n  useEffect(() => {\r\n    const final = [...props.newTweets].concat(tweetsInit);\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n  useEffect(() => {\r\n    if (tweetsDidSet === false) {\r\n      const handleTweetListLookup = (response, status) => {\r\n        if (status === 200) {\r\n          setTweetsInit(response);\r\n          setTweetsDidSet(true);\r\n        } else {\r\n          alert(\"There was an error\");\r\n        }\r\n      };\r\n      apiTweetList(props.username, handleTweetListLookup);\r\n    }\r\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\r\n\r\n  const handleDidRetweet = (newTweet) => {\r\n    const updateTweetsInit = [...tweetsInit];\r\n    updateTweetsInit.unshift(newTweet);\r\n    setTweetsInit(updateTweetsInit);\r\n    const updateFinalTweets = [...tweets];\r\n    updateFinalTweets.unshift(tweets);\r\n    setTweets(updateFinalTweets);\r\n  };\r\n  return tweets.map((item, index) => {\r\n    return (\r\n      <Tweet\r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        className=\"my-5 py-5 border bg-white text-dark\"\r\n        key={`${index}-{item.id}`}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action, didPerformAction } = props;\r\n  const likes = tweet.likes ? tweet.likes : 0;\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n  const actionDisplay = action.display ? action.display : \"Action\";\r\n\r\n  const handleActionBackendEvent = (response, status) => {\r\n    console.log(response, status);\r\n    if ((status === 200 || status === 201) && didPerformAction) {\r\n      didPerformAction(response, status);\r\n    }\r\n  };\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\r\n  };\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n  return tweet.parent ? (\r\n    <div className=\"row\">\r\n      <div className=\"col-11 mx-auto p-3 border rounded\">\r\n        <p className=\"mb-0 text-muted small\">Retweet</p>\r\n        <Tweet hideActions className={\" \"} tweet={tweet.parent} />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, hideActions } = props;\r\n  const [actionTweet, setActionTweet] = useState(\r\n    props.tweet ? props.tweet : null\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"col-10 mx-auto col-md-6\";\r\n\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status === 200) {\r\n      setActionTweet(newActionTweet);\r\n    } else if (status === 201) {\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        <p>\r\n          {tweet.id} - {tweet.content}\r\n        </p>\r\n        <ParentTweet tweet={tweet} />\r\n      </div>\r\n      {actionTweet && hideActions !== true && (\r\n        <div className=\"btn btn-group\">\r\n          <ActionBtn\r\n            tweet={actionTweet}\r\n            didPerformAction={handlePerformAction}\r\n            action={{ type: \"like\", display: \"Likes\" }}\r\n          />\r\n          <ActionBtn\r\n            tweet={actionTweet}\r\n            didPerformAction={handlePerformAction}\r\n            action={{ type: \"unlike\", display: \"Unlike\" }}\r\n          />\r\n          <ActionBtn\r\n            tweet={actionTweet}\r\n            didPerformAction={handlePerformAction}\r\n            action={{ type: \"retweet\", display: \"Retweet\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { backendLookup } from \"../lookup\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n  backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action };\r\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\r\n}\r\n\r\nexport function apiTweetDetial(tweetId, callback) {\r\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback);\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n  let endpoint = \"/tweets/\";\r\n  if (username) {\r\n    endpoint = `/tweets/?username=${username}`;\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback);\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent } from \"./tweets\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}