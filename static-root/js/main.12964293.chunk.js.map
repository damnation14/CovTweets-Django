{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/create.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","message","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12964293.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    var cookies = document.cookie.split(\";\");\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`;\r\n  xhr.responseType = \"json\";\r\n  const csrftoken = getCookie(\"csrftoken\");\r\n  xhr.open(method, url);\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n  if (csrftoken) {\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n  }\r\n\r\n  xhr.onload = function () {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail;\r\n      if (detail === \"Authentication credentials were not provided.\") {\r\n        window.location.href = \"/login?showLoginRequired=true\";\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = function (e) {\r\n    callback({ message: \"The request was an error\" }, 400);\r\n  };\r\n  xhr.send(jsonData);\r\n}\r\n","import React from \"react\";\r\n\r\nimport { apiTweetAction } from \"./lookup\";\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action, didPerformAction } = props;\r\n  const likes = tweet.likes ? tweet.likes : 0;\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n  const actionDisplay = action.display ? action.display : \"Action\";\r\n\r\n  const handleActionBackendEvent = (response, status) => {\r\n    console.log(response, status);\r\n    if ((status === 200 || status === 201) && didPerformAction) {\r\n      didPerformAction(response, status);\r\n    }\r\n  };\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\r\n  };\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n","import { backendLookup } from \"../lookup\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n  backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action };\r\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback);\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n  let endpoint = \"/tweets/\";\r\n  if (username) {\r\n    endpoint = `/tweets/?username=${username}`;\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback);\r\n}\r\n","import React from \"react\";\r\nimport { apiTweetCreate } from \"./lookup\";\r\n\r\nexport function TweetCreate(props) {\r\n  const textAreaRef = React.createRef();\r\n  const { didTweet } = props;\r\n  const handleBackendUpdate = (response, status) => {\r\n    if (status === 201) {\r\n      didTweet(response);\r\n    } else {\r\n      console.log(response);\r\n      alert(\"An error occured please try again\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newVal = textAreaRef.current.value;\r\n    // backend api request\r\n    apiTweetCreate(newVal, handleBackendUpdate);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n  return (\r\n    <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          ref={textAreaRef}\r\n          required={true}\r\n          className=\"form-control\"\r\n          name=\"tweet\"\r\n        ></textarea>\r\n        <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n          Tweet\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { ActionBtn } from \"./buttons\";\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n  return tweet.parent ? (\r\n    <div className=\"row\">\r\n      <div className=\"col-11 mx-auto p-3 border rounded\">\r\n        <p className=\"mb-0 text-muted small\">Retweet</p>\r\n        <Tweet hideActions className={\" \"} tweet={tweet.parent} />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, hideActions } = props;\r\n  const [actionTweet, setActionTweet] = useState(\r\n    props.tweet ? props.tweet : null\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"col-10 mx-auto col-md-6\";\r\n  const path = window.location.pathname;\r\n  const match = path.match(/(?<tweetid>\\d+)/);\r\n  const urlTweetId = match ? match.groups.tweetid : -1;\r\n  const isDetail = `${tweet.id}` === `${urlTweetId}`;\r\n\r\n  const handleLink = (event) => {\r\n    event.preventDefault();\r\n    window.location.href = `/${tweet.id}`;\r\n  };\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status === 200) {\r\n      setActionTweet(newActionTweet);\r\n    } else if (status === 201) {\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        <p>\r\n          {tweet.id} - {tweet.content}\r\n        </p>\r\n        <ParentTweet tweet={tweet} />\r\n      </div>\r\n      <div className=\"btn btn-group\">\r\n        {actionTweet && hideActions !== true && (\r\n          <React.Fragment>\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"like\", display: \"Likes\" }}\r\n            />\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"unlike\", display: \"Unlike\" }}\r\n            />\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"retweet\", display: \"Retweet\" }}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n        {isDetail === true ? null : (\r\n          <button\r\n            className=\"btn btn-outline-primary btn-sm\"\r\n            onClick={handleLink}\r\n          >\r\n            View\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { apiTweetList } from \"./lookup\";\r\n\r\nimport { Tweet } from \"./detail\";\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n  useEffect(() => {\r\n    const final = [...props.newTweets].concat(tweetsInit);\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n  useEffect(() => {\r\n    if (tweetsDidSet === false) {\r\n      const handleTweetListLookup = (response, status) => {\r\n        if (status === 200) {\r\n          setTweetsInit(response);\r\n          setTweetsDidSet(true);\r\n        } else {\r\n          alert(\"There was an error\");\r\n        }\r\n      };\r\n      apiTweetList(props.username, handleTweetListLookup);\r\n    }\r\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\r\n\r\n  const handleDidRetweet = (newTweet) => {\r\n    const updateTweetsInit = [...tweetsInit];\r\n    updateTweetsInit.unshift(newTweet);\r\n    setTweetsInit(updateTweetsInit);\r\n    const updateFinalTweets = [...tweets];\r\n    updateFinalTweets.unshift(tweets);\r\n    setTweets(updateFinalTweets);\r\n  };\r\n  return tweets.map((item, index) => {\r\n    return (\r\n      <Tweet\r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        className=\"my-5 py-5 border bg-white text-dark\"\r\n        key={`${index}-{item.id}`}\r\n      />\r\n    );\r\n  });\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { TweetCreate } from \"./create\";\r\nimport { Tweet } from \"./detail\";\r\nimport { apiTweetDetail } from \"./lookup\";\r\nimport { TweetsList } from \"./list\";\r\n\r\nexport function TweetsComponent(props) {\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true;\r\n  const handleNewTweet = (newTweet) => {\r\n    let tempNewTweets = [...newTweets];\r\n    tempNewTweets.unshift(newTweet);\r\n    setNewTweets(tempNewTweets);\r\n  };\r\n  return (\r\n    <div className={props.className}>\r\n      {canTweet === true && (\r\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\r\n      )}\r\n      <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetDetailComponent(props) {\r\n  const { tweetId } = props;\r\n  const [didLookup, setDidLookup] = useState(false);\r\n  const [tweet, setTweet] = useState(null);\r\n\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response);\r\n    } else {\r\n      alert(\"There was an error finding your tweet.\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (didLookup === false) {\r\n      apiTweetDetail(tweetId, handleBackendLookup);\r\n      setDidLookup(true);\r\n    }\r\n  }, [tweetId, didLookup, setDidLookup]);\r\n\r\n  return tweet === null ? null : (\r\n    <Tweet tweet={tweet} className={props.className} />\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent, TweetDetailComponent } from \"./tweets\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\");\n\ntweetDetailElements.forEach((container) => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}